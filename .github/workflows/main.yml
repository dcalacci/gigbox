# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ deploy ]
  pull_request:
    branches: [ deploy ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - 
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          context: ./server
          file: ./server/Dockerfile.prod
          tags: gigbox/gigbox-server:latest
      -
        name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
  aws-deploy:
    # needs latest server to deploy
    needs: docker
    runs-on: ubuntu-latest
    env:
       ENV: ${{secrets.ENV}}
       SECRET_KEY: ${{secrets.SECRET_KEY}}
       TWILIO_NUMBER: ${{secrets.TWILIO_NUMBER}}
       TWILIO_SID: ${{secrets.TWILIO_SID}}
       TWILIO_TOKEN: ${{secrets.TWILIO_TOKEN}}
       DB_HOST: ${{secrets.DB_HOST}}
       DB_PORT: ${{secrets.DB_PORT}}
       POSTGRES_USER: ${{secrets.secrets.POSTGRES_USER}}
       POSTGRES_PASSWORD: ${{secrets.POSTGRES_PASSWORD}}
       POSTGRES_DB: ${{secrets.POSTGRES_DB}}
       AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
       PROJECT_NAME: ${{secrets.PROJECT_NAME}}
       PROFILE_NAME: ${{secrets.PROFILE_NAME}}
       CLUSTER_NAME: ${{secrets.CLUSTER_NAME}}
       REGION: ${{secrets.REGION}}
       LAUNCH_TYPE: ${{secrets.LAUNCH_TYPE}}
       INSTANCE_TYPE: ${{secrets.INSTANCE_TYPE}}
       KEYPAIR: ${{secrets.KEYPAIR}}
       FS_ID: ${{secrets.FS_ID}}
       FS_NAME: ${{secrets.FS_NAME}}
       OSRM_DATASYNC_SOURCE: ${{secrets.OSRM_DATASYNC_SOURCE}}
       IAM_POLICY_NAME: ${{secrets.IAM_POLICY_NAME}}
       IAM_ROLE_NAME: ${{secrets.IAM_ROLE_NAME}}

    steps:
      - 
        name: Checkout
        uses: actions/checkout@v2
      - # enable our aws credentials
        id: install-aws-cli
        uses: unfor19/install-aws-cli-action@v1
        with:
          version: 2 # default
          verbose: false # default
      - # creates an ECS configuration
        name: Create aws cluster configuration
        run: cd server/deploy && ./0-cluster-configure.sh
      - # brings raw resources up
        name: Bring up cluster
        run: cd server/deploy && ./1-cluster-create.sh
      - # ensures our EFS with persistent data can connect to instances, and bring 'em up
        name: Configure EFS with cluster VPC & deploy!
        run: cd server/deploy && ./2-cluster-configure-efs.sh
